"""Mono‚ÄëFabrique Telegram¬†bot ‚Äî MVP
=================================================
Telegram bot that connects garment factories (¬´–§–∞–±—Ä–∏–∫–∞¬ª) with buyers (¬´–ó–∞–∫–∞–∑—á–∏–∫¬ª).
Single‚Äëfile implementation (~660 sloc) based on **aiogram¬†3.4+** with no extra
runtime deps. Works in *long‚Äëpolling* (default) or *webhook* mode.

Major flows
-----------
* Factory onboarding ‚Üí PRO subscription (‚ÇÇ‚ÄØ000‚ÄØ‚ÇΩ stub‚Äëpayment)
* Buyer creates order ‚Üí payment (‚Çá‚ÄØ00‚ÄØ‚ÇΩ) ‚Üí instant dispatch to matching
  PRO‚Äëfactories (by category, min_qty, ‚©Ω¬†budget)
* Factories view ¬´üìÇ –ó–∞—è–≤–∫–∏¬ª, send price / lead‚Äëtime / sample‚Äëcost; buyer gets
  proposal cards
* Profiles, history, `/help`, SQLite persistence

Environment
-----------
* **BOT_TOKEN**¬†‚Äì Telegram bot token (required)
* BOT_MODE¬†‚Äì `POLLING` (default) or `WEBHOOK`
* WEBHOOK_BASE¬†‚Äì public https URL (required in webhook mode)
* PORT¬†‚Äì Render/Fly sets automatically
"""
from __future__ import annotations

import asyncio
import logging
import os
import re
import sqlite3
from datetime import datetime
from typing import Any, Iterable

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from aiogram.webhook.aiohttp_server import (
    SimpleRequestHandler,
    setup_application,
)
from aiohttp import web

try:
    # optional for local dev
    from dotenv import load_dotenv

    load_dotenv()
except ModuleNotFoundError:
    pass

# ---------------------------------------------------------------------------
#  Config
# ---------------------------------------------------------------------------
TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not TOKEN:
    raise RuntimeError("Environment variable BOT_TOKEN is missing. Set BOT_TOKEN.")

BOT_MODE = os.getenv("BOT_MODE", "POLLING").upper()
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "")
PORT = int(os.getenv("PORT", "8080"))

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger("fabrique-bot")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

DB_PATH = "fabrique.db"

# ---------------------------------------------------------------------------
#  DB helpers
# ---------------------------------------------------------------------------

def init_db() -> None:
    with sqlite3.connect(DB_PATH) as db:
        db.execute(
            """
            CREATE TABLE IF NOT EXISTS factories (
                tg_id INTEGER PRIMARY KEY,
                name TEXT,
                inn TEXT,
                categories TEXT,
                min_qty INTEGER,
                avg_price INTEGER,
                portfolio TEXT,
                is_pro INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );"""
        )
        db.execute(
            """
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                buyer_id INTEGER,
                category TEXT,
                quantity INTEGER,
                budget INTEGER,
                destination TEXT,
                lead_time INTEGER,
                file_id TEXT,
                paid INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );"""
        )
        db.execute(
            """
            CREATE TABLE IF NOT EXISTS proposals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                factory_id INTEGER,
                price INTEGER,
                lead_time INTEGER,
                sample_cost INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(order_id) REFERENCES orders(id),
                FOREIGN KEY(factory_id) REFERENCES factories(tg_id)
            );"""
        )
    logger.info("SQLite schema ensured ‚úî")


def fetchall(sql: str, params: Iterable[Any] | None = None) -> list[sqlite3.Row]:
    with sqlite3.connect(DB_PATH) as db:
        db.row_factory = sqlite3.Row
        return db.execute(sql, params or []).fetchall()


def fetchone(sql: str, params: Iterable[Any] | None = None) -> sqlite3.Row | None:
    rows = fetchall(sql, params)
    return rows[0] if rows else None


def execute(sql: str, params: Iterable[Any] | None = None) -> None:
    with sqlite3.connect(DB_PATH) as db:
        db.execute(sql, params or [])
        db.commit()

# ---------------------------------------------------------------------------
#  FSM definitions
# ---------------------------------------------------------------------------


class FactoryForm(StatesGroup):
    inn = State()
    photos = State()
    categories = State()
    min_qty = State()
    avg_price = State()
    portfolio = State()
    confirm_pay = State()


class BuyerForm(StatesGroup):
    category = State()
    quantity = State()
    budget = State()
    destination = State()
    lead_time = State()
    file = State()
    confirm_pay = State()


class ProposalForm(StatesGroup):
    price = State()
    lead_time = State()
    sample_cost = State()

# ---------------------------------------------------------------------------
#  UI helpers
# ---------------------------------------------------------------------------


def build_factory_menu() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [
                types.KeyboardButton(text="üìÇ –ó–∞—è–≤–∫–∏"),
                types.KeyboardButton(text="üßæ –ü—Ä–æ—Ñ–∏–ª—å"),
            ],
            [types.KeyboardButton(text="/help")],
        ],
    )


def send_order_card(chat_id: int, row: sqlite3.Row) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"lead:{row['id']}")]]
    )
    caption = (
        f"<b>–ó–∞—è–≤–∫–∞¬†#Z‚Äë{row['id']}</b>\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row['category']}\n"
        f"–¢–∏—Ä–∞–∂: {row['quantity']} —à—Ç.\n"
        f"–ë—é–¥–∂–µ—Ç: {row['budget']}‚ÄØ‚ÇΩ –∑–∞ –µ–¥.\n"
        f"–°—Ä–æ–∫: {row['lead_time']}‚ÄØ–¥–Ω.\n"
        f"–ì–æ—Ä–æ–¥: {row['destination']}"
    )
    asyncio.create_task(bot.send_message(chat_id, caption, reply_markup=kb))


# ---------------------------------------------------------------------------
#  Lead dispatching
# ---------------------------------------------------------------------------


def notify_factories(order_row: sqlite3.Row) -> None:
    """Push new order to all suitable PRO‚Äëfactories."""
    factories = fetchall(
        """
        SELECT tg_id FROM factories
         WHERE is_pro = 1
           AND min_qty <= ?
           AND avg_price <= ?
           AND (',' || categories || ',') LIKE ('%,' || ? || ',%');""",
        (order_row["quantity"], order_row["budget"], order_row["category"]),
    )
    logger.info("Dispatch lead %s ‚Üí %d factories", order_row["id"], len(factories))
    for f in factories:
        send_order_card(f["tg_id"], order_row)

# ---------------------------------------------------------------------------
#  Common commands
# ---------------------------------------------------------------------------


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    kb = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [types.KeyboardButton(text="üõ† –Ø ‚Äì –§–∞–±—Ä–∏–∫–∞")],
            [types.KeyboardButton(text="üõí –ú–Ω–µ –Ω—É–∂–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞")],
            [types.KeyboardButton(text="‚Ñπ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç"), types.KeyboardButton(text="üßæ –¢–∞—Ä–∏—Ñ—ã")],
        ],
    )
    await state.clear()
    await message.answer("<b>–ü—Ä–∏–≤–µ—Ç!</b> –ö—Ç–æ –≤—ã?", reply_markup=kb)


@router.message(F.text == "üßæ –ü—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message) -> None:
    row = fetchone("SELECT * FROM factories WHERE tg_id = ?", (message.from_user.id,))
    if row:
        await message.answer(
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å —Ñ–∞–±—Ä–∏–∫–∏</b>\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {row['categories']}\n"
            f"–ú–∏–Ω.—Ç–∏—Ä–∞–∂: {row['min_qty']} —à—Ç.\n"
            f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {row['avg_price']}‚ÇΩ\n"
            f"PRO: {'‚úÖ' if row['is_pro'] else '‚Äî'}"
        )
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —Ñ–∞–±—Ä–∏–∫–∏ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑.")

# ---------------------------------------------------------------------------
#  Factory flow
# ---------------------------------------------------------------------------

@router.message(F.text == "üõ† –Ø ‚Äì –§–∞–±—Ä–∏–∫–∞")
async def factory_begin(message: Message, state: FSMContext) -> None:
    await state.set_state(FactoryForm.inn)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:")


@router.message(FactoryForm.inn)
async def factory_inn(message: Message, state: FSMContext) -> None:
    await state.update_data(inn=message.text.strip())
    await state.set_state(FactoryForm.photos)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ 1‚Äë3 —Ñ–æ—Ç–æ —Ü–µ—Ö–∞ –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ISO:")


@router.message(FactoryForm.photos, F.photo | F.document)
async def factory_photos(message: Message, state: FSMContext) -> None:
    file_ids = (
        [p.file_id for p in message.photo] if message.photo else [message.document.file_id]
    )
    await state.update_data(photos=",".join(file_ids))
    await state.set_state(FactoryForm.categories)
    kb = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [types.KeyboardButton(text="–¢—Ä–∏–∫–æ—Ç–∞–∂"), types.KeyboardButton(text="–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞")],
            [types.KeyboardButton(text="–î–æ–º–∞—à–Ω–∏–π —Ç–µ–∫—Å—Ç–∏–ª—å")],
        ],
    )
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞?", reply_markup=kb)


@router.message(FactoryForm.categories)
async def factory_categories(message: Message, state: FSMContext) -> None:
    cats = [c.strip() for c in re.split(r",|\n", message.text) if c.strip()]
    await state.update_data(categories=",".join(cats))
    await state.set_state(FactoryForm.min_qty)
    await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–∏—Ä–∞–∂ (—à—Ç.)?")


@router.message(FactoryForm.min_qty)
async def factory_min_qty(message: Message, state: FSMContext) -> None:
    digits = re.sub(r"\D", "", message.text)
    if not digits:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(min_qty=int(digits))
    await state.set_state(FactoryForm.avg_price)
    await message.answer("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚ÇΩ)?")


@router.message(FactoryForm.avg_price)
async def factory_avg_price(message: Message, state: FSMContext) -> None:
    digits = re.sub(r"\D", "", message.text)
    if not digits:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(avg_price=int(digits))
    await state.set_state(FactoryForm.portfolio)
    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (Behance/Google –î–∏—Å–∫)?")


@router.message(FactoryForm.portfolio)
async def factory_portfolio(message: Message, state: FSMContext) -> None:
    await state.update_data(portfolio=message.text.strip())
    data = await state.get_data()
    text = (
        "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ</b>\n"
        f"–ò–ù–ù: {data['inn']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {data['categories']}\n"
        f"–ú–∏–Ω.—Ç–∏—Ä–∞–∂: {data['min_qty']}\n"
        f"–¶–µ–Ω–∞: {data['avg_price']} ‚ÇΩ"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 2¬†000 ‚ÇΩ", callback_data="pay_factory")]]
    )
    await state.set_state(FactoryForm.confirm_pay)
    await message.answer(text, reply_markup=kb)


@router.callback_query(F.data == "pay_factory", FactoryForm.confirm_pay)
async def factory_pay(call: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    execute(
        """INSERT OR REPLACE INTO factories
               (tg_id, name, inn, categories, min_qty, avg_price, portfolio, is_pro)
             VALUES(?, ?, ?, ?, ?, ?, ?, 1);""",
        (
            call.from_user.id,
            call.from_user.full_name,
            data["inn"],
            data["categories"],
            data["min_qty"],
            data["avg_price"],
            data["portfolio"],
        ),
    )
    await state.clear()
    await call.message.edit_text("‚úÖ –°—Ç–∞—Ç—É—Å: <b>PRO</b>. –õ–∏–¥—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.")
    await bot.send_message(call.from_user.id, "–ú–µ–Ω—é —Ñ–∞–±—Ä–∏–∫–∏:", reply_markup=build_factory_menu())
    await call.answer()

# ---------------------------------------------------------------------------
#  Buyer flow
# ---------------------------------------------------------------------------

@router.message(F.text == "üõí –ú–Ω–µ –Ω—É–∂–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞")
async def buyer_begin(message: Message, state: FSMContext) -> None:
    await state.set_state(BuyerForm.category)
    await message.answer("–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏? –ö–∞—Ç–µ–≥–æ—Ä–∏—è:")


@router.message(BuyerForm.category)
async def buyer_category(message: Message, state: FSMContext) -> None:
    await state.update_data(category=message.text.strip())
    await state.set_state(BuyerForm.quantity)
    await message.answer("–¢–∏—Ä–∞–∂ (—à—Ç.)?")


@router.message(BuyerForm.quantity)
async def buyer_quantity(message: Message, state: FSMContext) -> None:
    digits = re.sub(r"\D", "", message.text)
    if not digits:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(quantity=int(digits))
    await state.set_state(BuyerForm.budget)
    await message.answer("–ë—é–¥–∂–µ—Ç (‚ÇΩ)?")


@router.message(BuyerForm.budget)
async def buyer_budget(message: Message, state: FSMContext) -> None:
    digits = re.sub(r"\D", "", message.text)
    if not digits:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(budget=int(digits))
    await state.set_state(BuyerForm.destination)
    await message.answer("–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π?")


@router.message(BuyerForm.destination)
async def buyer_destination(message: Message, state: FSMContext) -> None:
    await state.update_data(destination=message.text.strip())
    await state.set_state(BuyerForm.lead_time)
    await message.answer("–°—Ä–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–¥–Ω–µ–π)?")


@router.message(BuyerForm.lead_time)
async def buyer_lead(message: Message, state: FSMContext) -> None:
    digits = re.sub(r"\D", "", message.text)
    if not digits:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä <b>45</b>.")
        return
    await state.update_data(lead_time=int(digits))
    await state.set_state(BuyerForm.file)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –¢–ó –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å (—Ñ–∞–π–ª/—Ñ–æ—Ç–æ), –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª:")


@router.message(BuyerForm.file, F.photo | F.document)
async def buyer_file(message: Message, state: FSMContext) -> None:
    file_id = message.document.file_id if message.document else message.photo[-1].file_id
    await state.update_data(file_id=file_id)
    await state.set_state(BuyerForm.confirm_pay)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 700 ‚ÇΩ", callback_data="pay_order")]])
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ —É—à–ª–∞ —Ñ–∞–±—Ä–∏–∫–∞–º.", reply_markup=kb)


@router.message(BuyerForm.file)
async def buyer_file_skip(message: Message, state: FSMContext) -> None:
    await state.update_data(file_id="")
    await state.set_state(BuyerForm.confirm_pay)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 700 ‚ÇΩ", callback_data="pay_order")]])
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ —É—à–ª–∞ —Ñ–∞–±—Ä–∏–∫–∞–º.", reply_markup=kb)


@router.callback_query(F.data == "pay_order", BuyerForm.confirm_pay)
async def buyer_pay(call: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    with sqlite3.connect(DB_PATH) as db:
        cur = db.execute(
            """INSERT INTO orders
                   (buyer_id, category, quantity, budget, destination,
                    lead_time, file_id, paid)
                 VALUES(?,?,?,?,?,?,?,1);""",
            (
                call.from_user.id,
                data["category"],
                data["quantity"],
                data["budget"],
                data["destination"],
                data["lead_time"],
                data["file_id"],
            ),
        )
        order_id = cur.lastrowid
        row = db.execute("SELECT * FROM orders WHERE id = ?;", (order_id,)).fetchone()
        db.commit()
    await state.clear()
    await call.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç —Ñ–∞–±—Ä–∏–∫!")
    await call.answer()
    notify_factories(row)

# ---------------------------------------------------------------------------
#  Factories: –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–∫–ª–∏–∫–∏
# ---------------------------------------------------------------------------

@router.message(F.text == "üìÇ –ó–∞—è–≤–∫–∏")
async def factory_orders_list(message: Message) -> None:
    factory = fetchone("SELECT * FROM factories WHERE tg_id = ?", (message.from_user.id,))
    if not factory or not factory["is_pro"]:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ PRO-—Ñ–∞–±—Ä–∏–∫–∞–º.")
        return
    rows = fetchall(
        """
        SELECT o.* FROM orders o
         LEFT JOIN proposals p
           ON p.order_id = o.id AND p.factory_id = ?
         WHERE o.paid = 1
           AND (',' || ? || ',') LIKE ('%,' || o.category || ',%')
           AND o.quantity >= ?
           AND p.id IS NULL
         ORDER BY o.created_at DESC LIMIT 20;""",
        (message.from_user.id, factory["categories"], factory["min_qty"]),
    )
    if not rows:
        await message.answer("–ü–æ–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return
    for r in rows:
        send_order_card(message.from_user.id, r)


@router.callback_query(F.data.startswith("lead:"))
async def proposal_begin(call: CallbackQuery, state: FSMContext) -> None:
    order_id = int(call.data.split(":"))[1]
    await state.update_data(order_id=order_id)
    await state.set_state(ProposalForm.price)
    await call.message.answer("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚ÇΩ):")
    await call.answer()


@router.message(ProposalForm.price)
async def proposal_price(message: Message, state: FSMContext) -> None:
    digits = re.sub(r"\D", "", message.text)
    if not digits:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(price=int(digits))
    await state.set_state(ProposalForm.lead_time)
    await message.answer("–°—Ä–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–¥–Ω–µ–π):")


@router.message(ProposalForm.lead_time)
async def proposal_lead(message: Message, state: FSMContext) -> None:
    digits = re.sub(r"\D", "", message.text)
    if not digits:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(lead_time=int(digits))
    await state.set_state(ProposalForm.sample_cost)
    await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–∑—Ü–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è (‚ÇΩ) –ª–∏–±–æ 0:")


@router.message(ProposalForm.sample_cost)
async def proposal_finish(message: Message, state: FSMContext) -> None:
    digits = re.sub(r"\D", "", message.text)
    if digits == "":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∏–ª–∏ 0).")
        return
    await state.update_data(sample_cost=int(digits))
    data = await state.get_data()
    execute(
        """INSERT INTO proposals(order_id, factory_id, price, lead_time, sample_cost)
             VALUES (?,?,?,?,?);""",
        (
            data["order_id"],
            message.from_user.id,
            data["price"],
            data["lead_time"],
            data["sample_cost"],
        ),
    )
    order = fetchone("SELECT * FROM orders WHERE id = ?", (data["order_id"],))
    caption = (
        f"<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ¬†#P‚Äë{data['order_id']}</b>\n"
        f"–¶–µ–Ω–∞: {data['price']}‚ÇΩ\n"
        f"–°—Ä–æ–∫: {data['lead_time']} –¥–Ω.\n"
        f"–û–±—Ä–∞–∑–µ—Ü: {data['sample_cost']}‚ÇΩ"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=f"tg://user?id={message.from_user.id}")]]
    )
    await bot.send_message(order["buyer_id"], caption, reply_markup=kb)
    await state.clear()
    await message.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é!")

# ---------------------------------------------------------------------------
#  Help & tariffs
# ---------------------------------------------------------------------------

@router.message(F.text == "‚Ñπ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
async def how_it_works(message: Message) -> None:
    await message.answer(
        "<b>Mono‚ÄëFabrique</b> —Å–≤—è–∑—ã–≤–∞–µ—Ç —Ñ–∞–±—Ä–∏–∫–∏ –∏ –±—Ä–µ–Ω–¥—ã.\n"
        "1. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç 700¬†‚ÇΩ.\n"
        "2. –†–∞—Å—Å—ã–ª–∫–∞ –∏–¥—ë—Ç –ø–æ PRO‚Äë—Ñ–∞–±—Ä–∏–∫–∞–º.\n"
        "3. –§–∞–±—Ä–∏–∫–∏ –æ—Ç–≤–µ—á–∞—é—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, –æ–±—â–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é."
    )


@router.message(F.text == "üßæ –¢–∞—Ä–∏—Ñ—ã")
async def tariffs(message: Message) -> None:
    await message.answer("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: 700¬†‚ÇΩ –∑–∞ –∑–∞—è–≤–∫—É.\n–§–∞–±—Ä–∏–∫–∞: 2‚ÄØ000¬†‚ÇΩ PRO/–º–µ—Å (MVP ‚Äì –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ).")

# ---------------------------------------------------------------------------
#  Startup logic
# ---------------------------------------------------------------------------

async def main() -> None:
    init_db()
    if BOT_MODE == "WEBHOOK":
        await bot.delete_webhook(drop_pending_updates=True)
        webhook_path = f"/tg/{TOKEN}"
        await bot.set_webhook(f"{WEBHOOK_BASE}{webhook_path}")
        app = web.Application()
        SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=webhook_path)
        setup_application(app, dp, bot=bot)
        logger.info("Webhook set %s", WEBHOOK_BASE)
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", PORT)
        await site.start()
        while True:
            await asyncio.sleep(3600)
    else:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook cleared ‚úî ‚Äì switched to long‚Äëpolling mode")
        await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
