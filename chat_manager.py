"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ —á–∞—Ç–∞–º–∏ —Å–¥–µ–ª–æ–∫
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telethon –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–¥–µ–ª–∫–∏
"""
import os
import logging
import asyncio
from typing import List, Optional, Dict, Any
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import UserPrivacyRestrictedError, PeerFloodError, ChatAdminRequiredError
from telethon.tl.functions.messages import CreateChatRequest, AddChatUserRequest
from telethon.tl.functions.channels import CreateChannelRequest, InviteToChannelRequest
from telethon.tl.types import InputPeerUser, InputPeerChat

logger = logging.getLogger(__name__)

class ChatManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ —Å–¥–µ–ª–æ–∫."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon."""
        self.api_id = int(os.getenv('API_ID', '25651355'))
        self.api_hash = os.getenv('API_HASH', '216ecff1bbd5b60a8d8734d84013f028')
        self.session_string = os.getenv('SESSION_STRING', 
            '1ApWapzMBuwJjVnIFToiUTfp8WvLrUZeafrI3zgXmDOHHk4oNUWTH1sOStWPmsebaBDkpj5mmaWu8LMtQ9qGiDjxn6nhWqZ4CaQQdpoF-e_Eg5kXfc01s6moIFITbD9yHSqnpUp20K_smQZMS8pP-5VUHFqh7EITkkie-s_BcnHJMa0tan-QsjsMx99Zsjl9wPIMREjBOAGFR5rFwItDEzi6nExZNW3DcNxoBk1UecJ_kcrbPYg5xD-Bu7uF3lh2vK1y4LgnEzrDwK-6oUT6S7Q24Gq2G5psc-kvWsGXU7UP_diP0jcabVWMZlgR3pvkVO1b9ugi6qUHyIFk1RiinljcZLVid_H4='
        )
        
        if not self.session_string:
            raise ValueError("SESSION_STRING –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.client = TelegramClient(
            StringSession(self.session_string), 
            self.api_id, 
            self.api_hash
        )
        self._initialized = False
    
    async def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        if not self._initialized:
            try:
                await self.client.start()
                me = await self.client.get_me()
                logger.info(f"Telethon –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {me.username}")
                self._initialized = True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon: {e}")
                raise
    
    async def create_deal_chat(
        self, 
        deal_id: int, 
        buyer_id: int, 
        factory_id: int, 
        admin_ids: List[int],
        order_title: str = ""
    ) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è —Å–¥–µ–ª–∫–∏.
        
        Args:
            deal_id: ID —Å–¥–µ–ª–∫–∏
            buyer_id: Telegram ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            factory_id: Telegram ID —Ñ–∞–±—Ä–∏–∫–∏
            admin_ids: –°–ø–∏—Å–æ–∫ Telegram ID –∞–¥–º–∏–Ω–æ–≤
            order_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ None
        """
        await self.init()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
            participants = []
            participant_names = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            try:
                buyer = await self.client.get_entity(buyer_id)
                participants.append(buyer)
                buyer_name = buyer.first_name or f"–ó–∞–∫–∞–∑—á–∏–∫ {buyer_id}"
                participant_names.append(buyer_name)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {buyer_id}: {e}")
                return None
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–±—Ä–∏–∫—É
            try:
                factory = await self.client.get_entity(factory_id)
                participants.append(factory)
                factory_name = factory.first_name or f"–§–∞–±—Ä–∏–∫–∞ {factory_id}"
                participant_names.append(factory_name)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–±—Ä–∏–∫—É {factory_id}: {e}")
                return None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            for admin_id in admin_ids[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –∞–¥–º–∏–Ω–∞
                try:
                    admin = await self.client.get_entity(admin_id)
                    participants.append(admin)
                    participant_names.append("–ê–¥–º–∏–Ω")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            
            if len(participants) < 2:
                logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            title_parts = []
            if order_title:
                title_parts.append(order_title[:20])
            title_parts.append(f"–°–¥–µ–ª–∫–∞ #{deal_id}")
            chat_title = " - ".join(title_parts)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –≥—Ä—É–ø–ø—É (—Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —á–µ–º —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞)
            try:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∫—Ä–æ–º–µ —Å–µ–±—è) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
                first_user = participants[0]
                
                result = await self.client(CreateChatRequest(
                    users=[first_user],
                    title=chat_title[:255]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                ))
                
                chat_id = result.chats[0].id
                logger.info(f"–°–æ–∑–¥–∞–Ω —á–∞—Ç {chat_id} –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                for participant in participants[1:]:
                    try:
                        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏
                        await self.client(AddChatUserRequest(
                            chat_id=chat_id,
                            user_id=participant,
                            fwd_limit=0
                        ))
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {participant.id} –≤ —á–∞—Ç {chat_id}")
                    except UserPrivacyRestrictedError:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {participant.id} –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã")
                    except PeerFloodError:
                        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                        await asyncio.sleep(5)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {participant.id}: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                welcome_message = (
                    f"ü§ù <b>–ß–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal_id}</b>\n\n"
                    f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
                    f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {participant_names[0]}\n"
                    f"üè≠ –§–∞–±—Ä–∏–∫–∞: {participant_names[1]}\n"
                )
                
                if len(participant_names) > 2:
                    welcome_message += f"üë®‚Äçüíº –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {', '.join(participant_names[2:])}\n"
                
                welcome_message += (
                    f"\nüìã –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–∂–¥–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞, "
                    f"–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–∞–º–∏ –∏ —Ä–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–¥–µ–ª–∫–µ.\n\n"
                    f"‚ö° –ß–∞—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏."
                )
                
                await self.client.send_message(chat_id, welcome_message, parse_mode='html')
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
                chat_link = f"https://t.me/c/{chat_id}"
                
                return {
                    'chat_id': chat_id,
                    'chat_title': chat_title,
                    'chat_link': chat_link,
                    'participants': [p.id for p in participants],
                    'participant_names': participant_names
                }
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
                return None
                
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}: {e}")
            return None
    
    async def send_message_to_chat(self, chat_id: int, message: str, parse_mode: str = 'html') -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å–¥–µ–ª–∫–∏.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –§–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ç–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        await self.init()
        
        try:
            await self.client.send_message(chat_id, message, parse_mode=parse_mode)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            return False
    
    async def add_user_to_chat(self, chat_id: int, user_id: int) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        await self.init()
        
        try:
            user = await self.client.get_entity(user_id)
            await self.client(AddChatUserRequest(
                chat_id=chat_id,
                user_id=user,
                fwd_limit=0
            ))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç {chat_id}: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç."""
        if self._initialized:
            await self.client.disconnect()
            self._initialized = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–∞—Ç–æ–≤
_chat_manager = None

async def get_chat_manager() -> ChatManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–∞—Ç–æ–≤."""
    global _chat_manager
    if _chat_manager is None:
        _chat_manager = ChatManager()
        await _chat_manager.init()
    return _chat_manager

async def create_deal_chat(deal_id: int, buyer_id: int, factory_id: int, admin_ids: List[int], order_title: str = "") -> Optional[Dict[str, Any]]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ —Å–¥–µ–ª–∫–∏."""
    manager = await get_chat_manager()
    return await manager.create_deal_chat(deal_id, buyer_id, factory_id, admin_ids, order_title)

async def send_deal_message(chat_id: int, message: str) -> bool:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å–¥–µ–ª–∫–∏."""
    manager = await get_chat_manager()
    return await manager.send_message_to_chat(chat_id, message)
