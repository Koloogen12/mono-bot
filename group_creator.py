"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –≤ Telegram
============================================

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. pip install pyrogram
2. –ü–æ–ª—É—á–∏—Ç—å API_ID –∏ API_HASH –Ω–∞ https://my.telegram.org/apps
3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- TELEGRAM_API_ID - 25651355
- TELEGRAM_API_HASH - 216ecff1bbd5b60a8d8734d84013f028
- TELEGRAM_BOT_TOKEN - 7872394424:AAE0sUBNy2p61kXw4XlZTv3JQp9wB8B_fmY
"""

import asyncio
import logging
import os
from typing import List, Optional, Tuple
from pyrogram import Client
from pyrogram.errors import (
    UserPrivacyRestricted, 
    UserNotMutualContact, 
    FloodWait,
    ChatAdminRequired,
    UserAlreadyParticipant
)

logger = logging.getLogger("group_creator")

class TelegramGroupCreator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –≤ Telegram"""
    
    def __init__(self, api_id: str = None, api_hash: str = None, bot_token: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            api_id: API ID –æ—Ç Telegram (–∏–ª–∏ –∏–∑ env TELEGRAM_API_ID)
            api_hash: API Hash –æ—Ç Telegram (–∏–ª–∏ –∏–∑ env TELEGRAM_API_HASH) 
            bot_token: Bot token (–∏–ª–∏ –∏–∑ env TELEGRAM_BOT_TOKEN)
        """
        self.api_id = api_id or os.getenv("TELEGRAM_API_ID")
        self.api_hash = api_hash or os.getenv("TELEGRAM_API_HASH")
        self.bot_token = bot_token or os.getenv("TELEGRAM_BOT_TOKEN")
        
        if not all([self.api_id, self.api_hash, self.bot_token]):
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API_ID, API_HASH –∏ BOT_TOKEN")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±–æ—Ç–∞
        self.client = Client(
            "mono_fabrique_bot",
            api_id=int(self.api_id),
            api_hash=self.api_hash,
            bot_token=self.bot_token
        )
        
    async def create_deal_group(
        self, 
        deal_id: int, 
        buyer_id: int, 
        factory_id: int, 
        admin_ids: List[int],
        deal_title: str,
        factory_name: str,
        buyer_name: str
    ) -> Tuple[Optional[int], Optional[str]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è —Å–¥–µ–ª–∫–∏
        
        Args:
            deal_id: ID —Å–¥–µ–ª–∫–∏
            buyer_id: Telegram ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            factory_id: Telegram ID —Ñ–∞–±—Ä–∏–∫–∏
            admin_ids: –°–ø–∏—Å–æ–∫ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            deal_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            factory_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏
            buyer_name: –ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[chat_id, invite_link] –∏–ª–∏ (None, error_message)
        """
        try:
            async with self.client:
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                group_title = f"–°–¥–µ–ª–∫–∞ #{deal_id} - {deal_title[:20]}..."
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                participants = [buyer_id, factory_id] + admin_ids
                
                # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                group = await self.client.create_group(
                    title=group_title,
                    users=participants
                )
                
                chat_id = group.id
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                description = (
                    f"–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}\n"
                    f"üì¶ –ó–∞–∫–∞–∑: {deal_title}\n"
                    f"üè≠ –§–∞–±—Ä–∏–∫–∞: {factory_name}\n"
                    f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {buyer_name}\n\n"
                    f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–∂–¥–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å."
                )
                
                await self.client.set_chat_description(chat_id, description)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–æ–∫–∏–Ω–µ—Ç –≥—Ä—É–ø–ø—É
                invite_link = await self.client.create_chat_invite_link(chat_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                welcome_msg = (
                    f"ü§ù <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å–¥–µ–ª–∫–∏ #{deal_id}!</b>\n\n"
                    f"üì¶ –ó–∞–∫–∞–∑: {deal_title}\n"
                    f"üè≠ –§–∞–±—Ä–∏–∫–∞: {factory_name}\n"
                    f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {buyer_name}\n\n"
                    f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    f"‚Ä¢ –û–±—Å—É–∂–¥–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞\n"
                    f"‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã\n"
                    f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
                    f"‚Ä¢ –î–µ–ª–∏—Ç—å—Å—è —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n\n"
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
                )
                
                await self.client.send_message(chat_id, welcome_msg)
                
                logger.info(f"Created group {chat_id} for deal {deal_id}")
                return chat_id, invite_link.invite_link
                
        except UserPrivacyRestricted as e:
            error_msg = "–û–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã"
            logger.error(f"Privacy error creating group for deal {deal_id}: {e}")
            return None, error_msg
            
        except UserNotMutualContact as e:
            error_msg = "–ù–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∑–∞–∏–º–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"
            logger.error(f"Contact error creating group for deal {deal_id}: {e}")
            return None, error_msg
            
        except FloodWait as e:
            error_msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.x} —Å–µ–∫—É–Ω–¥"
            logger.error(f"Flood wait creating group for deal {deal_id}: {e}")
            return None, error_msg
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {str(e)}"
            logger.error(f"Error creating group for deal {deal_id}: {e}")
            return None, error_msg
    
    async def add_user_to_group(self, chat_id: int, user_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
        
        Args:
            chat_id: ID –≥—Ä—É–ø–ø—ã
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            async with self.client:
                await self.client.add_chat_members(chat_id, user_id)
                logger.info(f"Added user {user_id} to group {chat_id}")
                return True
                
        except UserAlreadyParticipant:
            logger.info(f"User {user_id} already in group {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error adding user {user_id} to group {chat_id}: {e}")
            return False
    
    async def send_message_to_group(self, chat_id: int, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        
        Args:
            chat_id: ID –≥—Ä—É–ø–ø—ã
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            async with self.client:
                await self.client.send_message(chat_id, message)
                return True
                
        except Exception as e:
            logger.error(f"Error sending message to group {chat_id}: {e}")
            return False
    
    async def create_invite_link(self, chat_id: int, expire_date: int = None) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã
        
        Args:
            chat_id: ID –≥—Ä—É–ø–ø—ã
            expire_date: Unix timestamp –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            
        Returns:
            –ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            async with self.client:
                invite_link = await self.client.create_chat_invite_link(
                    chat_id, 
                    expire_date=expire_date
                )
                return invite_link.invite_link
                
        except Exception as e:
            logger.error(f"Error creating invite link for group {chat_id}: {e}")
            return None
    
    async def get_group_info(self, chat_id: int) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        
        Args:
            chat_id: ID –≥—Ä—É–ø–ø—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            async with self.client:
                chat = await self.client.get_chat(chat_id)
                
                return {
                    "id": chat.id,
                    "title": chat.title,
                    "description": chat.description,
                    "members_count": chat.members_count,
                    "type": str(chat.type),
                    "username": chat.username
                }
                
        except Exception as e:
            logger.error(f"Error getting group info for {chat_id}: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
async def create_deal_chat_real(
    deal_id: int,
    buyer_id: int, 
    factory_id: int,
    admin_ids: List[int],
    deal_title: str,
    factory_name: str,
    buyer_name: str
) -> Tuple[Optional[int], Optional[str]]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è —Å–¥–µ–ª–∫–∏
    
    Returns:
        Tuple[chat_id, invite_link] –∏–ª–∏ (None, error_message)
    """
    creator = TelegramGroupCreator()
    
    return await creator.create_deal_group(
        deal_id=deal_id,
        buyer_id=buyer_id,
        factory_id=factory_id,
        admin_ids=admin_ids,
        deal_title=deal_title,
        factory_name=factory_name,
        buyer_name=buyer_name
    )

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–¥–µ–ª–∫–∏
    chat_id, result = await create_deal_chat_real(
        deal_id=123,
        buyer_id=111111111,  # Telegram ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        factory_id=222222222,  # Telegram ID —Ñ–∞–±—Ä–∏–∫–∏  
        admin_ids=[333333333],  # Telegram ID –∞–¥–º–∏–Ω–æ–≤
        deal_title="–§—É—Ç–±–æ–ª–∫–∏ —Å –ø—Ä–∏–Ω—Ç–æ–º 500—à—Ç",
        factory_name="–¢–µ–∫—Å—Ç–∏–ª—å –ü–ª—é—Å",
        buyer_name="–°–≤–µ—Ç–ª–∞–Ω–∞"
    )
    
    if chat_id:
        print(f"–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {chat_id}")
        print(f"–ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞: {result}")
    else:
        print(f"–û—à–∏–±–∫–∞: {result}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(example_usage())
